import pandas as pd

## combining and merging data sets
pd.merge(A,B,on='comlumn_name')
pd.merge(A,B, left_on='A_column_name',right_on='B_column_name',how='right') ##how could be left, right, outer. 
##default inner which means intersection.
## Merge on index left_index=True, right_index=True
pd.merge(A,B,left_index=True) ##use index of A to merge data

## Concatenating along an axis
newdata = np.concatenate([A,B],axis=0)

pd.concat([A,B,C], axis=0)

## combine data with overlap
new_serise = seriseB.combine_first(seriseA) ## element of new serise will be non-NAN from A or B, if conflicts choose from A.

## Reshaping data with Hierarchical Indexing
s_data = data.stack() add another ``index''
s_data.unstack()

## pivoting 'long' to 'wide' format
#### data is stored in long format which means multiple(2) columns are the primary key
pivot_data = data.pivot('rowkey_name','columnkey_name','item_name')

## data transformation
## removing duplicates
data.duplicated()
data.drop_duplicates(['column1','column2'],take_last=True) ## by default, take_last is false

## data Transforming Using a function or mapping
data['new_column'] = data['col1'].map(str.lower).map(a_lambda_fun).map(a_dictionary)
## replacing
data.replace(-999,np.nan)
data.replace([1,2],[3,4])

## discretization and bining
ages = [20, 22, 25, 27, 21, 23, 37, 31, 61, 45, 41, 32]
bins = [18,25,35,60,100]
categories = pd.cut(ages,bins,labels=label_list)
## cut into quatiles
numerical = pd.qcut(data,4)
pd.qcut(data,[0,0.1,0.5,0.9,1.0])

## count
pd.value_count(cates)

## Permutation and random sampling
sampler_index = np.random.permutation(5)
data.take(sampler_index)

## Computing Indicator / Dummy variables
dummy_frame = pd.get_dummies(data['cate_col_name'],prefix='key')

## String Manipulation
s.split(),s.strip(),"".join(alist)
s.index(',') #raise ValueError, s.find(','), s.rfind(',') ## return -1

## count occurrences of a string
s.count(',')




