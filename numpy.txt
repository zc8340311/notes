import numpy as np
## load data
np.load('filename') ## load an npk pickle, python2 and python3 have different pickle.
np.loadtxt(filename,delimiter=',') ## load an csv file

## dtype hierarchy
np.float64.mro()
np.issubdtype(data.dtype,np.integer)

## reshape
arr.reshape(2,4) ## one parameter can be -1 which means it will inferred from data.

## ravel and flatten
data.ravel() ## ravel does not copy data, flatten always make a copy of original data.
data.flatten()

data.ravel('F') #ravel in fortran way, column-first to flatten ndarray

### np.r_ and np.c_ are concise way to stacking ndarrays along 0 axis and 1 axis

## Repeat and Tile
arr = [0,1,2]
new_arr = arr.repeat([2,3,4]) ## In this case, the 0 will be repeat 2 times, 1, 3 times and 2 4 times.

##tile means repeat an array in a grid way.
np.tile(arr,(2,1))

## More Indexing :Take and Put
idx = [4,5,6]
indexed_arr = arr.take(idx) ## indexing

arr.put(idx,100) ## change elements on idx to 100

arr.put(idx,[100,101,102])

## ufunc function usage
np.add.reduce(data) 
##reduce take a single array and aggregates its values optionally along an axis, 
##by performing a sequence of binary operations

##accumulate is related to reduce like cumsum is related to sum. 
##It produces an array of the same size with the intermediate accumulated values
np.add.accumulate(arr,axis=0)

## outer performs a pairwise cross-product between two arrays
np.multiply,outer(arr,np.arange(5))

## reduceat performs a local reduce
local_reduce_range = [0,5,8]
np.add.reduceat(arr,local_reduce_range)
## which will return local sum reduce according to given range 
##e.g. give sum of 0-0, sum of arr[0:5], sum of arr[5:8], and sum of arr[8:]



